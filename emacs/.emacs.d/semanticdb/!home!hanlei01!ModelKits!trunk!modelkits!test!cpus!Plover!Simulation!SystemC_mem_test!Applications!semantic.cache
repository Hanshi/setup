;; Object Applications/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "Applications/"
  :tables
  (list
    (semanticdb-table "Makefile"
      :major-mode 'makefile-gmake-mode
      :tags 
        '( ("./make.cfg" include nil nil [938 957])
            ("FPU" variable (:default-value ("vfpv3")) nil [988 1001])
            ("CPU" variable (:default-value ("cortex-r7")) nil [1001 1018])
            ("bootcode_dir" variable (:default-value ("shared/bootcode")) nil [1049 1084])
            ("c_libraries_dir" variable (:default-value ("shared/c_libraries")) nil [1084 1122])
            ("GCC_TOOLCHAIN" variable (:default-value ("arm-none-eabi")) nil [1339 1372])
            ("GCC_ASM" variable (:default-value ("$(GCC_TOOLCHAIN)-as")) nil [1372 1411])
            ("GCC" variable (:default-value ("$(GCC_TOOLCHAIN)-gcc")) nil [1411 1451])
            ("GCC_LINKER_ASM" variable (:default-value ("$(GCC_TOOLCHAIN)-ld")) nil [1451 1490])
            ("GCC_LINKER_CSRC" variable (:default-value ("$(GCC_TOOLCHAIN)-gcc")) nil [1490 1530])
            ("GCC_ELF2BIN" variable (:default-value ("$(GCC_TOOLCHAIN)-objcopy")) nil [1530 1574])
            ("GCC_DISASS" variable (:default-value ("$(GCC_TOOLCHAIN)-objdump")) nil [1574 1618])
            ("GCC_TARGET" variable (:default-value ("-march=armv8-a" "-mfpu=$(FPU)")) nil [1633 1686])
            ("GCC_ASM_OPTS" variable (:default-value ("$(GCC_TARGET)" "--defsym" "GCC=1")) nil [1686 1740])
            ("GCC_OPTS" variable (:default-value ("$(GCC_TARGET)" "-mtune=$(CPU)" "-c" "-g" "-O3" "-DGCC" "-falign-functions=16" "-falign-jumps=8" "-falign-loops=8" "-fomit-frame-pointer" "-funroll-loops" "-DITERATIONS=20" "-I" "$(c_libraries_dir)")) nil [1740 1936])
            ("GCC_LINKER_OPTS_ASM" variable nil nil [1936 1961])
            ("GCC_LINKER_OPTS_CSRC" variable nil nil [1961 1986])
            ("GCC_LINKER_FILE" variable (:default-value ("-T" "link.ld")) nil [1986 2022])
            ("GCC_LINKER_FILE_FLASH" variable (:default-value ("-T" "link_flash.ld")) nil [2022 2064])
            ("GCC_ELF2BIN_OPTS" variable (:default-value ("-O" "binary")) nil [2064 2099])
            ("GCC_DISASS_OPTS" variable (:default-value ("--disassemble-all" "--disassemble-zeroes")) nil [2099 2163])
            ("ARMCC_ASM" variable (:default-value ("armclang")) nil [2384 2410])
            ("ARMCC_CC" variable (:default-value ("armclang")) nil [2410 2436])
            ("ARMCC_LINKER" variable (:default-value ("armlink")) nil [2436 2461])
            ("ARMCC_ELF2BIN" variable (:default-value ("fromelf")) nil [2461 2486])
            ("ARMCC_DISASS" variable (:default-value ("fromelf")) nil [2486 2511])
            ("ARMCC_TARGET" variable (:default-value ("--target=arm-arm-none-eabi" "-mcpu=$(CPU)")) nil [2512 2579])
            ("ARMCC_ASM_OPTS" variable (:default-value ("$(ARMCC_TARGET)" "-c" "-g" "-DTCM")) nil [2599 2654])
            ("ARMCC_ASM_OPTS" variable (:default-value ("$(ARMCC_TARGET)" "-c" "-g")) nil [2659 2708])
            ("ARMCC_CC_OPTS" variable (:default-value ("$(ARMCC_TARGET)" "-marm" "-c" "-g" "-O0" "-DITERATIONS=1000" "-I" "$(c_libraries_dir)")) nil [2714 2813])
            ("ARMCC_LINKER_OPTS" variable (:default-value ("--noremove" "--entry=vector_table" "--startup=bootcode" "--tool_variant=ult" "--cpu=cortex-r7" "--datacompressor" "off" "--diag_suppress" "L6314W")) nil [2813 2971])
            ("ARMCC_LINKER_FILE" variable (:default-value ("--scatter" "link.sc")) nil [2971 3016])
            ("ARMCC_LINKER_FILE_FLASH" variable (:default-value ("--scatter" "link_flash.sc")) nil [3016 3067])
            ("ARMCC_ELF2BIN_OPTS" variable (:default-value ("--bin" "--bincombined")) nil [3067 3114])
            ("ARMCC_DISASS_OPTS" variable (:default-value ("-cdes")) nil [3114 3147])
            ("BIN2HEX" variable (:default-value ("./bin2vhx.py")) nil [3909 3944])
            ("BIN2HEX_WIDTH" variable (:default-value ("--width=128")) nil [3944 3978])
            ("BIN2HEX_AXI_OPTS" variable (:default-value ("--base-addr=0x0" "--max-addr=0x00200000")) nil [3978 4038])
            ("BIN2HEX_FLASH_OPTS" variable (:default-value ("--base-addr=0x08000000" "--max-addr=0x09000000")) nil [4038 4105])
            ("all_directories" variable (:default-value ("$(subst /,,$(wildcard */))")) nil [4276 4321])
            ("tests" variable (:default-value ("$(filter-out shared%,$(all_directories))")) nil [4321 4371])
            ("cc_tests" variable (:default-value ("saxpy" "cache_miss" "coremark_v1.0" "dhrystone" "testapp" "autotest_test1" "autotest_test1be" "autotest_test2" "autotest_test2be" "autotest_test3" "autotest_test3be" "autotest_test4" "autotest_tcm")) nil [4628 4820])
            ("GCC_SPECIAL_OPTS_DHRYSTONE" variable (:default-value ("$(subst -mfpu=$(FPU),, $(subst -funroll-loops,,$(GCC_OPTS)))" "-mword-relocations" "-fno-inline-functions" "-fno-inline")) nil [4976 5121])
            ("ARMCC_SPECIAL_OPTS_DHRYSTONE" variable (:default-value ("$(subst -loop-unroll,,$(ARMCC_CC_OPTS))" "-fno-inline-functions" "-fno-vectorize")) nil [5121 5229])
            ("GCC_SPECIAL_OPTS_COREMARK" variable (:default-value ("$(subst -mfpu=$(FPU),, $(subst -DITERATIONS=20,,$(GCC_OPTS)))" "-DITERATIONS=2" "-DPERFORMANCE_RUN=1" "-DUSE_DBASE")) nil [5293 5432])
            ("ARMCC_SPECIAL_OPTS_COREMARK" variable (:default-value ("$(subst -DITERATIONS=20,,$(ARMCC_CC_OPTS))" "-fno-vectorize" "-DITERATIONS=2" "-DPERFORMANCE_RUN=1" "-DUSE_DBASE")) nil [5432 5567])
            ("GCC_SPECIAL_OPTS_SAXPY" variable (:default-value ("$(subst -O3,, $(subst -DITERATIONS=20,,$(GCC_OPTS)))" "-DITERATIONS=2")) nil [5580 5673])
            ("ARMCC_SPECIAL_OPTS_SAXPY" variable (:default-value ("$(subst -DITERATIONS=20,,$(ARMCC_CC_OPTS))" "-fno-vectorize" "-DITERATIONS=2")) nil [5673 5773])
            ("COMPILER_INT" function (:arguments ("=" "$(strip $(COMPILER))")) nil [5986 6032])
            ("override" function (:arguments ("=" "$(strip $(COMPILER))")) nil [5986 6032])
            ("axi_dir" function (:arguments ("=" "$(COMPILER_INT)/elf")) nil [8014 8056])
            ("override" function (:arguments ("=" "$(COMPILER_INT)/elf")) nil [8014 8056])
            ("flash_dir" function (:arguments ("=" "$(COMPILER_INT)/elf_flash")) nil [8056 8104])
            ("override" function (:arguments ("=" "$(COMPILER_INT)/elf_flash")) nil [8056 8104])
            ("bootcode_srcs_s" variable (:default-value ("$(wildcard $(bootcode_dir)/*.s)")) nil [8134 8185])
            ("bootcode_objs_s" variable (:default-value ("$(patsubst %.s,%.o,$(bootcode_srcs_s))")) nil [8185 8243])
            ("librarietest_srcs_s_c" variable (:default-value ("$(wildcard $(c_libraries_dir)/*.c)")) nil [8278 8338])
            ("libraries_objs_c" variable (:default-value ("$(patsubst %.c,%.o,$(librarietest_srcs_s_c))")) nil [8338 8403])
            ("pmu_src_s_fixed" variable (:default-value ("$(wildcard $(c_libraries_dir)/*.s)")) nil [8417 8471])
            ("pmu_obj_s_fixed" variable (:default-value ("$(patsubst %.s,%.o,$(pmu_src_s_fixed))")) nil [8471 8529])
            ("test_srcs_s" variable (:default-value ("$(foreach test, $(tests), $(wildcard $(test)/src/*.s))")) nil [8719 8796])
            ("test_objs_s" variable (:default-value ("$(patsubst %.s, %.o, $(test_srcs_s))")) nil [8796 8855])
            ("test_srcs_c" variable (:default-value ("$(foreach test, $(tests), $(wildcard $(test)/src/*.c))")) nil [8880 8956])
            ("test_objs_c" variable (:default-value ("$(patsubst %.c, %.o, $(test_srcs_c))")) nil [8956 9014])
            ("other_tests_objs_c" variable (:default-value ("$(filter-out dhrystone% coremark% saxpy% testapp%, $(test_objs_c))")) nil [9014 9102])
            ("objs_dhrystone_c" variable (:default-value ("$(filter     dhrystone%, $(test_objs_c))")) nil [9102 9164])
            ("objs_testapp_c" variable (:default-value ("$(filter     testapp%, $(test_objs_c))")) nil [9164 9224])
            ("objs_coremark_c" variable (:default-value ("$(filter      coremark%, $(test_objs_c))")) nil [9224 9286])
            ("objs_saxpy_c" variable (:default-value ("$(filter         saxpy%, $(test_objs_c))")) nil [9286 9348])
            ("elfs" variable (:default-value ("$(foreach test, $(tests), $(test)/$(axi_dir)/test.elf)")) nil [9377 9450])
            ("elfs_asm" variable (:default-value ("$(filter-out $(foreach test, $(cc_tests), $(test)%), $(elfs))")) nil [9450 9530])
            ("elfs_cc" variable (:default-value ("$(filter     $(foreach test, $(cc_tests), $(test)%), $(elfs))")) nil [9530 9610])
            ("elfs_flash" variable (:default-value ("$(foreach test, $(tests), $(test)/$(flash_dir)/test.elf)")) nil [9655 9730])
            ("elfs_flash_asm" variable (:default-value ("$(filter-out $(foreach test, $(cc_tests), $(test)%), $(elfs_flash))")) nil [9730 9816])
            ("elfs_flash_gcc" variable (:default-value ("$(filter     $(foreach test, $(cc_tests), $(test)%), $(elfs_flash))")) nil [9816 9902])
            ("hexes_axi_mem" variable (:default-value ("$(foreach test, $(tests), $(test)/$(axi_dir)/axi_memory.vhx   $(test)/$(flash_dir)/axi_memory.vhx)")) nil [10097 10214])
            ("hexes_flash_mem" variable (:default-value ("$(foreach test, $(tests), $(test)/$(flash_dir)/flash_memory.vhx)")) nil [10214 10297])
            ("disassemblies" variable (:default-value ("$(foreach test, $(tests), $(test)/$(axi_dir)/test.disass $(test)/$(flash_dir)/test.disass)")) nil [10328 10437])
            ("elfs_both_comp" variable (:default-value ("$(foreach test, $(tests), $(test)/armcc/elf/test.elf         $(test)/armcc/elf_flash/test.elf           $(test)/gcc/elf/test.elf         $(test)/gcc/elf_flash/test.elf)")) nil [10470 10664])
            ("hexes_axi_both_comp" variable (:default-value ("$(foreach test, $(tests), $(test)/armcc/elf/axi_memory.vhx   $(test)/armcc/elf_flash/axi_memory.vhx     $(test)/gcc/elf/axi_memory.vhx   $(test)/gcc/elf_flash/axi_memory.vhx)")) nil [10867 11067])
            ("hexes_flash_both_comp" variable (:default-value ("$(foreach test, $(tests),                                    $(test)/armcc/elf_flash/flash_memory.vhx                                    $(test)/gcc/elf_flash/flash_memory.vhx)")) nil [11067 11269])
            ("disassembles_both_comp" variable (:default-value ("$(foreach test, $(tests), $(test)/armcc/elf/test.disass      $(test)/armcc/elf_flash/test.disass        $(test)/gcc/elf/test.disass      $(test)/gcc/elf_flash/test.disass)")) nil [11269 11466])
            ("tests_clean" variable (:default-value ("$(foreach test, $(tests), $(test)_clean)")) nil [11768 11827])
            ("tests_distclean" variable (:default-value ("$(foreach test, $(tests), $(test)_distclean)")) nil [11827 11890])
            (".PHONY" function (:arguments ("default")) nil [12082 12098])
            ("default" function nil nil [12098 12238])
            (".PHONY" function (:arguments ("all")) nil [12428 12440])
            ("all" function (:arguments ("$(disassemblies)")) nil [12500 12523])
            ("$(hexes_axi_mem)" function (:arguments ("%/axi_memory.vhx:" "%/memory_space.bin")) nil [12722 12875])
            ("$(hexes_flash_mem)" function (:arguments ("%/flash_memory.vhx:" "%/memory_space.bin")) nil [12876 13036])
            ("$(bin)" function (:arguments ("%/memory_space.bin:" "%/test.elf")) nil [13037 13128])
            ("$(disassemblies)" function (:arguments ("%/test.disass:" "%/test.elf")) nil [13252 13381])
            (".SECONDEXPANSION" function nil nil [13603 13621])
            ("$(elfs_asm)" function (:arguments ("%/test.elf" ":" "$(bootcode_objs_s)" "$$(%_objs)")) nil [13621 13778])
            (".SECONDEXPANSION" function nil nil [13779 13797])
            ("$(elfs_flash_asm)" function (:arguments ("%_flash/test.elf" ":" "$(bootcode_objs_s)" "$$(%_objs)")) nil [13797 13972])
            (".SECONDEXPANSION" function nil nil [14017 14035])
            ("$(elfs_cc)" function (:arguments ("%/test.elf" ":" "$(bootcode_objs_s)" "$(pmu_obj_s)" "$(libraries_objs_c)" "$$(%_objs)")) nil [14035 14226])
            (".SECONDEXPANSION" function nil nil [14227 14245])
            ("$(elfs_flash_gcc)" function (:arguments ("%_flash/test.elf" ":" "$(bootcode_objs_s)" "$(pmu_obj_s)" "$(libraries_objs_c)" "$$(%_objs)")) nil [14245 14455])
            ("$(bootcode_objs_s)" function (:arguments ("%.o:" "%.s")) nil [14632 14761])
            ("$(test_objs_s)" function (:arguments ("%.o:" "%.s")) nil [14632 14761])
            ("$(libraries_objs_c)" function (:arguments ("%.o:" "%.c")) nil [14762 14897])
            ("$(other_tests_objs_c)" function (:arguments ("%.o:" "%.c")) nil [14762 14897])
            ("$(objs_dhrystone_c)" function (:arguments ("%.o:" "%.c")) nil [14944 14974])
            ("$(objs_testapp_c)" function (:arguments ("%.o:" "%.c")) nil [15088 15197])
            ("$(objs_coremark_c)" function (:arguments ("%.o:" "%.c")) nil [15243 15372])
            ("$(objs_saxpy_c)" function (:arguments ("%.o:" "%.c")) nil [15415 15569])
            (".PHONY" function (:arguments ("$(tests)")) nil [15754 15771])
            (".PHONY" function (:arguments ("$(tests_clean)")) nil [16411 16434])
            ("shared_clean" function (:arguments ("%_clean" ":" "%_distclean")) nil [16434 16691])
            ("$(tests_clean)" function (:arguments ("%_clean" ":" "%_distclean")) nil [16434 16691])
            (".PHONY" function (:arguments ("$(tests_distclean)")) nil [16692 16719])
            ("shared_distclean" function nil nil [16719 16971])
            ("$(tests_distclean)" function nil nil [16719 16971])
            (".PHONY" function (:arguments ("clean")) nil [16972 16986])
            ("clean" function (:arguments ("distclean")) nil [16986 17145])
            (".PHONY" function (:arguments ("distclean")) nil [17146 17164])
            ("distclean" function nil nil [17164 17319]))          
      :file "Makefile"
      :pointmax 17319
      :fsize 17530
      :lastmodtime '(23449 19548 964815 0)
      :unmatched-syntax '((shell-command 17207 . 17318) (bol 17206 . 17206) (semantic-list 15991 . 16097) (punctuation 15990 . 15991) (bol 15990 . 15990) (shell-command 15019 . 15076) (bol 15018 . 15018) (semantic-list 11693 . 11753) (punctuation 11692 . 11693) (bol 11692 . 11692) (symbol 11686 . 11691) (bol 11686 . 11686) (semantic-list 11639 . 11685) (punctuation 11638 . 11639) (punctuation 11637 . 11638) (punctuation 11635 . 11636) (punctuation 11634 . 11635) (symbol 11624 . 11633) (semantic-list 11610 . 11624) (punctuation 11609 . 11610) (symbol 11608 . 11609) (semantic-list 11605 . 11608) (punctuation 11604 . 11605) (bol 11604 . 11604) (semantic-list 11557 . 11603) (punctuation 11556 . 11557) (punctuation 11555 . 11556) (punctuation 11553 . 11554) (symbol 11542 . 11551) (semantic-list 11528 . 11542) (punctuation 11527 . 11528) (symbol 11526 . 11527) (semantic-list 11523 . 11526) (punctuation 11522 . 11523) (bol 11522 . 11522) (symbol 11509 . 11521) (symbol 11502 . 11508) (bol 11502 . 11502) (bol 8669 . 8669) (bol 8653 . 8653) (semantic-list 8615 . 8646) (punctuation 8614 . 8615) (punctuation 8612 . 8613) (punctuation 8611 . 8612) (symbol 8601 . 8610) (bol 8599 . 8599) (semantic-list 8565 . 8598) (punctuation 8564 . 8565) (punctuation 8562 . 8563) (punctuation 8561 . 8562) (symbol 8551 . 8560) (bol 8549 . 8549) (semantic-list 7804 . 7823) (punctuation 7803 . 7804) (punctuation 7801 . 7802) (punctuation 7800 . 7801) (symbol 7784 . 7799) (bol 7782 . 7782) (semantic-list 7767 . 7781) (punctuation 7766 . 7767) (punctuation 7764 . 7765) (punctuation 7763 . 7764) (symbol 7747 . 7757) (bol 7745 . 7745) (semantic-list 7722 . 7739) (punctuation 7721 . 7722) (punctuation 7719 . 7720) (punctuation 7718 . 7719) (symbol 7702 . 7717) (bol 7700 . 7700) (semantic-list 7687 . 7699) (punctuation 7686 . 7687) (punctuation 7684 . 7685) (punctuation 7683 . 7684) (symbol 7667 . 7677) (bol 7665 . 7665) (semantic-list 7571 . 7591) (punctuation 7570 . 7571) (punctuation 7568 . 7569) (punctuation 7567 . 7568) (symbol 7541 . 7553) (bol 7539 . 7539) (semantic-list 7513 . 7538) (punctuation 7512 . 7513) (punctuation 7510 . 7511) (punctuation 7509 . 7510) (symbol 7483 . 7500) (bol 7481 . 7481) (semantic-list 7461 . 7480) (punctuation 7460 . 7461) (punctuation 7458 . 7459) (punctuation 7457 . 7458) (symbol 7431 . 7442) (bol 7429 . 7429) (semantic-list 7409 . 7428) (punctuation 7408 . 7409) (punctuation 7406 . 7407) (punctuation 7405 . 7406) (symbol 7379 . 7395) (bol 7377 . 7377) (semantic-list 7357 . 7376) (punctuation 7356 . 7357) (punctuation 7354 . 7355) (punctuation 7353 . 7354) (symbol 7327 . 7342) (bol 7325 . 7325) (semantic-list 7298 . 7324) (punctuation 7297 . 7298) (punctuation 7295 . 7296) (punctuation 7294 . 7295) (symbol 7268 . 7289) (bol 7266 . 7266) (semantic-list 7236 . 7265) (punctuation 7235 . 7236) (punctuation 7233 . 7234) (punctuation 7232 . 7233) (symbol 7206 . 7230) (bol 7204 . 7204) (semantic-list 7173 . 7203) (punctuation 7172 . 7173) (punctuation 7170 . 7171) (punctuation 7169 . 7170) (symbol 7143 . 7168) (bol 7141 . 7141) (semantic-list 7125 . 7140) (punctuation 7124 . 7125) (punctuation 7122 . 7123) (punctuation 7121 . 7122) (symbol 7095 . 7102) (bol 7093 . 7093) (semantic-list 7076 . 7092) (punctuation 7075 . 7076) (punctuation 7073 . 7074) (punctuation 7072 . 7073) (symbol 7046 . 7054) (bol 7044 . 7044) (bol 7007 . 7007) (semantic-list 6990 . 7005) (punctuation 6989 . 6990) (punctuation 6987 . 6988) (punctuation 6986 . 6987) (symbol 6974 . 6981) (bol 6972 . 6972) (semantic-list 6957 . 6971) (punctuation 6956 . 6957) (punctuation 6954 . 6955) (punctuation 6953 . 6954) (symbol 6941 . 6952) (bol 6939 . 6939) (semantic-list 6924 . 6938) (punctuation 6923 . 6924) (punctuation 6921 . 6922) (punctuation 6920 . 6921) (symbol 6908 . 6918) (bol 6906 . 6906) (semantic-list 6895 . 6905) (punctuation 6894 . 6895) (punctuation 6892 . 6893) (punctuation 6891 . 6892) (symbol 6879 . 6881) (bol 6877 . 6877) (semantic-list 6865 . 6876) (punctuation 6864 . 6865) (punctuation 6862 . 6863) (punctuation 6861 . 6862) (symbol 6849 . 6852) (bol 6847 . 6847) (bol 6818 . 6818) (semantic-list 6793 . 6811) (punctuation 6792 . 6793) (punctuation 6790 . 6791) (punctuation 6789 . 6790) (symbol 6763 . 6775) (bol 6761 . 6761) (semantic-list 6737 . 6760) (punctuation 6736 . 6737) (punctuation 6734 . 6735) (punctuation 6733 . 6734) (symbol 6707 . 6724) (bol 6705 . 6705) (semantic-list 6687 . 6704) (punctuation 6686 . 6687) (punctuation 6684 . 6685) (punctuation 6683 . 6684) (symbol 6657 . 6668) (bol 6655 . 6655) (semantic-list 6632 . 6654) (punctuation 6631 . 6632) (punctuation 6629 . 6630) (punctuation 6628 . 6629) (symbol 6602 . 6618) (bol 6600 . 6600) (semantic-list 6578 . 6599) (punctuation 6577 . 6578) (punctuation 6575 . 6576) (punctuation 6574 . 6575) (symbol 6548 . 6563) (bol 6546 . 6546) (semantic-list 6521 . 6545) (punctuation 6520 . 6521) (punctuation 6518 . 6519) (punctuation 6517 . 6518) (symbol 6491 . 6512) (bol 6489 . 6489) (semantic-list 6461 . 6488) (punctuation 6460 . 6461) (punctuation 6458 . 6459) (punctuation 6457 . 6458) (symbol 6431 . 6455) (bol 6429 . 6429) (semantic-list 6400 . 6428) (punctuation 6399 . 6400) (punctuation 6397 . 6398) (punctuation 6396 . 6397) (symbol 6370 . 6395) (bol 6368 . 6368) (semantic-list 6357 . 6367) (punctuation 6356 . 6357) (punctuation 6354 . 6355) (punctuation 6353 . 6354) (symbol 6327 . 6334) (bol 6325 . 6325) (semantic-list 6310 . 6324) (punctuation 6309 . 6310) (punctuation 6307 . 6308) (punctuation 6306 . 6307) (symbol 6280 . 6288) (bol 6278 . 6278) (bol 6243 . 6243) (semantic-list 6228 . 6241) (punctuation 6227 . 6228) (punctuation 6225 . 6226) (punctuation 6224 . 6225) (symbol 6212 . 6219) (bol 6210 . 6210) (semantic-list 6192 . 6209) (punctuation 6191 . 6192) (punctuation 6189 . 6190) (punctuation 6188 . 6189) (symbol 6176 . 6187) (bol 6174 . 6174) (semantic-list 6157 . 6173) (punctuation 6156 . 6157) (punctuation 6154 . 6155) (punctuation 6153 . 6154) (symbol 6141 . 6151) (bol 6139 . 6139) (semantic-list 6133 . 6138) (punctuation 6132 . 6133) (punctuation 6130 . 6131) (punctuation 6129 . 6130) (symbol 6117 . 6119) (bol 6115 . 6115) (semantic-list 6105 . 6114) (punctuation 6104 . 6105) (punctuation 6102 . 6103) (punctuation 6101 . 6102) (symbol 6089 . 6092) (bol 6087 . 6087) (bol 6060 . 6060) (semantic-list 4462 . 4489) (punctuation 4461 . 4462) (punctuation 4459 . 4460) (punctuation 4458 . 4459) (symbol 4452 . 4457) (bol 4450 . 4450) (symbol 3680 . 3694) (punctuation 3678 . 3679) (punctuation 3677 . 3678) (symbol 3662 . 3675) (bol 3660 . 3660) (symbol 3645 . 3659) (punctuation 3643 . 3644) (punctuation 3642 . 3643) (symbol 3627 . 3641) (bol 3625 . 3625) (symbol 3610 . 3624) (punctuation 3608 . 3609) (punctuation 3607 . 3608) (symbol 3592 . 3600) (bol 3590 . 3590) (symbol 3575 . 3589) (punctuation 3573 . 3574) (punctuation 3572 . 3573) (symbol 3557 . 3569) (bol 3555 . 3555) (symbol 3363 . 3377) (punctuation 3361 . 3362) (punctuation 3360 . 3361) (symbol 3345 . 3358) (bol 3343 . 3343) (symbol 3328 . 3342) (punctuation 3326 . 3327) (punctuation 3325 . 3326) (symbol 3310 . 3318) (bol 3308 . 3308) (shell-command 14732 . 14760) (bol 14731 . 14731)))
    (semanticdb-table "make.cfg"
      :file "make.cfg"
      :fsize 2246
      :lastmodtime '(23321 36366 0 0)))
  :file "!home!hanlei01!ModelKits!trunk!modelkits!test!cpus!Plover!Simulation!SystemC_mem_test!Applications!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
