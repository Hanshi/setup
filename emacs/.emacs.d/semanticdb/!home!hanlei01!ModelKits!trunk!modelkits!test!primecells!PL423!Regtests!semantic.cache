;; Object Regtests/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "Regtests/"
  :tables
  (list
    (semanticdb-table "regtest_functions.h"
      :major-mode 'c-mode
      :tags 
        '( ("_tmp_memRead_data" variable (:type "int") nil [72 143])
            ("_memRead_data" variable (:type "int") nil [72 143])
            ("_tmp_regRead_data" variable (:type "int") nil [72 143])
            ("_regRead_data" variable (:type "int") nil [72 143])
            ("_tmp_numBytes" variable (:type "int") nil [144 239])
            ("_tmp_address" variable (:type "int") nil [144 239])
            ("_tmp_initValue" variable (:type "int") nil [144 239])
            ("_tmp_depositValue" variable (:type "int") nil [144 239])
            ("_tmp_expectedValue" variable (:type "int") nil [144 239])
            ("_tmp_i" variable (:type "int") nil [144 239])
            ("_tmp_value" variable (:type "int") nil [240 307])
            ("_tmp_value0" variable (:type "int") nil [240 307])
            ("_tmp_value1" variable (:type "int") nil [240 307])
            ("_tmp_value2" variable (:type "int") nil [240 307])
            ("_tmp_value3" variable (:type "int") nil [240 307])
            ("_tmp_myInstanceId" variable (:type ("string" type (:type "class") nil nil)) nil [308 393])
            ("_tmp_myInstanceMemSpaceName" variable (:type ("string" type (:type "class") nil nil)) nil [308 393])
            ("_tmp_componentName" variable (:type ("string" type (:type "class") nil nil)) nil [308 393])
            ("_tmp_mode" variable (:type ("string" type (:type "class") nil nil)) nil [308 393])
            ("_num_tests" variable
               (:default-value "0"
                :type "int")
                nil [394 413])
            ("PRINT_FAIL3" variable (:constant-flag t) nil [700 711])
            ("MEMORY_DEBUG_READ" variable (:constant-flag t) nil [928 945])
            ("REGISTER_DEBUG_READ" variable (:constant-flag t) nil [1460 1479])
            ("MEMORY_DEBUG_WRITE" variable (:constant-flag t) nil [1766 1784])
            ("REGISTER_DEBUG_WRITE" variable (:constant-flag t) nil [2285 2305])
            ("PRINT_PASS1" variable (:constant-flag t) nil [2414 2425])
            ("PRINT_PASS4" variable (:constant-flag t) nil [2562 2573])
            ("CHECK_MEMORY_DEBUG_READ" variable (:constant-flag t) nil [2871 2894])
            ("CHECK_REGISTER_DEBUG_READ" variable (:constant-flag t) nil [3604 3629])
            ("CHECK_MEMORY_READ" variable (:constant-flag t) nil [4817 4834])
            ("CHECK_REGISTER_READ" variable (:constant-flag t) nil [5719 5738])
            ("CHECK_MEMORY_READ_WRITE" variable (:constant-flag t) nil [6784 6807])
            ("CHECK_REGISTER_READ_WRITE" variable (:constant-flag t) nil [8287 8312])
            ("CHECK_REGISTER_READ_WRITEIGNORE" variable (:constant-flag t) nil [10277 10308])
            ("CHECK_MEMORY_DEBUG_RW" variable (:constant-flag t) nil [11583 11604])
            ("CHECK_REGISTER_VALUE" variable (:constant-flag t) nil [12808 12828])
            ("PRINT_TEST_SUMMARY" variable (:constant-flag t) nil [14002 14020]))          
      :file "regtest_functions.h"
      :pointmax 14376
      :fsize 14375
      :lastmodtime '(22472 57563 0 0)
      :unmatched-syntax '((close-paren 11178 . 11179) (punctuation 11174 . 11175) (semantic-list #("{ \\
  CHECK_MEMORY_READ(myInstanceId, myInstanceMemSpaceName, numBytes, regReadAddress, expectedValue);  \\
  CHECK_REGISTER_DEBUG_READ(componentName, regName, expectedValue, mask);    \\
}" 0 1 (macros (("mask") ("expectedValue" symbol "expectedValue" 11160 . 11173) ("numBytes" symbol "numBytes" 11150 . 11158) ("regReadAddress" symbol "address" 11141 . 11148) ("regName" symbol "regName" 11132 . 11139) ("componentName" symbol "componentName" 11117 . 11130) ("myInstanceMemSpaceName" symbol "myInstanceMemSpaceName" 11093 . 11115) ("myInstanceId" symbol "myInstanceId" 11079 . 11091)))) 11059 . 11174) (punctuation 11052 . 11053) (semantic-list #("{  \\
    CADIRegWrite(componentName, regName, regValue);  \\
}" 0 1 (macros (("regValue" symbol "depositValue" 11039 . 11051) ("regName" symbol "regName" 11030 . 11037) ("componentName" symbol "componentName" 11015 . 11028)))) 10994 . 11052))
      :lexical-table 
        '(("REGISTER_DEBUG_WRITE" (spp-arg-list ("componentName" "regName" "regValue") 2305 . 2339) . ((semantic-list "{  \\
    CADIRegWrite(componentName, regName, regValue);  \\
}" 2343 . 2404)))
          ("CHECK_REGISTER_READ_WRITE" (spp-arg-list ("myInstanceId" "myInstanceMemSpaceName" "componentName" "regName" "address" "numBytes" "depositValue" "expectedValue") 8312 . 8422) . ((semantic-list "{ \\
  CHECK_BURST1_128BIT_WRITE(address, 4, depositValue, 0x0, MX_STATUS_OK, log_file, \"AXI Memory Write\"); \\
  _num_tests++; \\
  CHECK_REGISTER_READ(myInstanceId, myInstanceMemSpaceName, componentName, regName, address, numBytes, expectedValue);  \\
  /* Disabling this and adding an additional macro to do this since the sdsim complains about macro being too long  \\
  MEMORY_DEBUG_WRITE(myInstanceId, myInstanceMemSpaceName, numBytes, address, depositValue); \\
  CHECK_REGISTER_READ(myInstanceId, myInstanceMemSpaceName, componentName, regName, address, numBytes, expectedValue);  \\
   */ \\
  REGISTER_DEBUG_WRITE(componentName, regName, depositValue); \\
  CHECK_REGISTER_READ(myInstanceId, myInstanceMemSpaceName, componentName, regName, address, numBytes, expectedValue); \\
}" 8423 . 9202)))
          ("CHECK_REGISTER_VALUE" (spp-arg-list ("mode" "myInstanceId" "myInstanceMemSpaceName" "componentName" "regName" "address" "numBytes" "depositValue" "expectedValue") 12828 . 12944) . ((semantic-list "{  \\
  REGISTER_DEBUG_READ(componentName, regName, _tmp_initValue);  \\
  if (mode == \"R\")  \\
  {  \\
    CHECK_REGISTER_READ(myInstanceId, myInstanceMemSpaceName, componentName, regName, address, numBytes, expectedValue);  \\
  }  \\
  if (mode == \"R/W\") {  \\
    CHECK_REGISTER_READ_WRITE(myInstanceId, myInstanceMemSpaceName, componentName, regName, address, numBytes, depositValue, expectedValue); \\
    REGISTER_DEBUG_WRITE(componentName, regName, _tmp_initValue); \\
    CHECK_REGISTER_READ(myInstanceId, myInstanceMemSpaceName, componentName, regName, address, numBytes, _tmp_initValue); \\
  }  \\
  if (mode == \"R/WI\")  {  \\
    CHECK_REGISTER_READ_WRITEIGNORE(myInstanceId, myInstanceMemSpaceName, componentName, regName, address, numBytes, depositValue, expectedValue, _tmp_initValue); \\
    REGISTER_DEBUG_WRITE(myInstanceId, regName, _tmp_initValue); \\
    CHECK_REGISTER_READ(myInstanceId, myInstanceMemSpaceName, componentName, regName, address, numBytes, _tmp_initValue); \\
  }  \\
}" 12946 . 13937)))
          ("CHECK_MEMORY_DEBUG_READ" (spp-arg-list ("myInstanceId" "myInstanceMemSpaceName" "numBytes" "address" "expectedValue") 2894 . 2966) . ((semantic-list "{  \\
  MEMORY_DEBUG_READ(myInstanceId, myInstanceMemSpaceName, numBytes, address, _memRead_data);  \\
  _num_tests++;  \\
  if (_memRead_data == expectedValue) {  \\
    PRINT_PASS1(log_file, \"%s %s (actual and expected are 0x%x)\\n\", \"Memory Debug Read Passed\" , \"Passed\", expectedValue ); \\
  } else {  \\
    PRINT_FAIL3(log_file, \"%s FAILED (Memory Debug Read (at addr 0x%X) data value wrong: 0x%X (actual) != 0x%X (expected))\\n\", \"Memory Read Debug\", address, _memRead_data, expectedValue) \\
  }  \\
}" 2967 . 3467)))
          ("MEMORY_DEBUG_READ" (spp-arg-list ("myInstanceId" "myInstanceMemSpaceName" "numBytes" "readAddress" "readData") 945 . 1016) . ((semantic-list "{ \\
  readData = 0; \\
  if(numBytes > 16) message(MX_MSG_WARNING, \"Maximum number of bytes that can be read at one time are 16\"); \\
  for (_tmp_i = 0; _tmp_i < numBytes; _tmp_i++) { \\
    _tmp_memRead_data = CADIMemRead(myInstanceId, myInstanceMemSpaceName, readAddress + _tmp_i); \\
    readData =  readData | (_tmp_memRead_data << 8*_tmp_i); \\
  } \\
}" 1017 . 1369)))
          ("REGISTER_DEBUG_READ" (spp-arg-list ("componentName" "regName" "regReadData") 1479 . 1516) . ((semantic-list "{ \\
  regReadData = CADIRegRead(componentName, regName); \\
}" 1517 . 1577)))
          ("PRINT_PASS1" (spp-arg-list ("File" "Text" "InfoText" "Suffix" "arg1") 2425 . 2461) . ((semantic-list "{ \\
  fprintf(File, Text, InfoText, Suffix, arg1); \\
  AXI_Stub_CheckMacros_Pass++; \\
}" 2465 . 2552)))
          ("CHECK_REGISTER_READ_WRITEIGNORE" (spp-arg-list ("myInstanceId" "myInstanceMemSpaceName" "componentName" "regName" "address" "numBytes" "depositValue" "expectedValue" "initValue") 10308 . 10429) . 
              ((open-paren "{" 10430 . 10431) (symbol "CHECK_BURST1_128BIT_WRITE" 10437 . 10462) (semantic-list "(address, 4, depositValue, 0x0, MX_STATUS_OK, log_file, \"AXI Memory Write\")" 10462 . 10537) (punctuation ";" 10537 . 10538) (symbol "_num_tests" 10544 . 10554) (punctuation "+" 10554 . 10555) (punctuation "+" 10555 . 10556) (punctuation ";" 10556 . 10557) (symbol "CHECK_REGISTER_READ" 10563 . 10582) (semantic-list "(myInstanceId, myInstanceMemSpaceName, componentName, regName, address, numBytes, initValue)" 10582 . 10674) (punctuation ";" 10674 . 10675)))
          ("CHECK_REGISTER_DEBUG_READ" (spp-arg-list ("componentName" "regName" "expectedValue" "mask") 3629 . 3674) . ((semantic-list "{ \\
  REGISTER_DEBUG_READ(componentName, regName, _tmp_regRead_data);  \\
  _num_tests++;  \\
  if ( (_tmp_regRead_data & mask) == expectedValue) {                   \\
    PRINT_PASS4(log_file, \"%s %s (%s: actual is 0x%x, expected is 0x%x, read mask: 0x%x)\\n\", \"Register Debug Read Passed\" , \"Passed\", regName, _tmp_regRead_data, expectedValue, mask); \\
  } else {  \\
    PRINT_FAIL3(log_file, \"%s FAILED (Register Debug Read data value wrong for %s: (actual) 0x%X != (expected) 0x%X)\\n\", \"Register Read Debug\", regName, _tmp_regRead_data, expectedValue)  \\
  }  \\
}" 3675 . 4239)))
          ("MEMORY_DEBUG_WRITE" (spp-arg-list ("myInstanceId" "myInstanceMemSpaceName" "numBytes" "writeAddress" "writeValue") 1784 . 1858) . ((semantic-list "{ \\
 if(numBytes > 16) message(MX_MSG_WARNING, \"Maximum number of bytes that can be written at one time are 16\"); \\
 for (_tmp_i = 0; _tmp_i < numBytes; _tmp_i++) { \\
  _tmp_value0 = (writeValue >> _tmp_i * 8) & 0xFF;  \\
  CADIMemWrite(myInstanceId, myInstanceMemSpaceName, (writeAddress + _tmp_i), _tmp_value0);	\\
 } \\
}" 1861 . 2182)))
          ("PRINT_PASS4" (spp-arg-list ("File" "Text" "InfoText" "Suffix" "arg1" "arg2" "arg3" "arg4") 2573 . 2627) . ((semantic-list "{ \\
  fprintf(File, Text, InfoText, Suffix, arg1, arg2, arg3, arg4); \\
  AXI_Stub_CheckMacros_Pass++; \\
}" 2631 . 2736)))
          ("CHECK_MEMORY_READ" (spp-arg-list ("myInstanceId" "myInstanceMemSpaceName" "numBytes" "memReadAddress" "expectedValue") 4834 . 4913) . ((semantic-list "{  \\
  CHECK_MEMORY_DEBUG_READ(myInstanceId, myInstanceMemSpaceName, numBytes, memReadAddress, expectedValue);  \\
  CHECK_BURST1_128BIT_READ_PART1(memReadAddress,4);  \\
  CHECK_BURST1_128BIT_READ_PART2(expectedValue, 0x0, MX_STATUS_OK, log_file, \"AXI Memory Read Access Check\");  \\
  _num_tests++;  \\
}" 4914 . 5216)))
          ("CHECK_MEMORY_READ_WRITE" (spp-arg-list ("myInstanceId" "myInstanceMemSpaceName" "numBytes" "address" "depositValue" "expectedValue") 6807 . 6893) . ((semantic-list "{  \\
  MEMORY_DEBUG_WRITE(myInstanceId, myInstanceMemSpaceName, numBytes, address, depositValue); \\
  CHECK_MEMORY_READ(myInstanceId, myInstanceMemSpaceName, numBytes, address, expectedValue);  \\  \\
  CHECK_BURST1_128BIT_WRITE(address, 4, depositValue, 0x0, MX_STATUS_OK, log_file, \"AXI Memory Write\"); \\
  _num_tests++;  \\
  CHECK_MEMORY_READ(myInstanceId, myInstanceMemSpaceName, numBytes, address, expectedValue);  \\
}" 6894 . 7315)))
          ("PRINT_FAIL3" (spp-arg-list ("File" "Text" "InfoText" "Addr" "Data" "ExpData") 711 . 754) . ((semantic-list "{ \\
  fprintf(File, Text, InfoText, Addr, Data, ExpData);		\\
  message(MX_MSG_WARNING, Text, InfoText, Addr, Data, ExpData);	\\
  AXI_Stub_CheckMacros_Fail++; \\
}" 757 . 918)))
          ("PRINT_TEST_SUMMARY" . ((semantic-list "{ \\
  if ((AXI_Stub_CheckMacros_Fail == 0) && (_num_tests == AXI_Stub_CheckMacros_Pass)) \\
    message(MX_MSG_INFO, \" Test Passed (%d tests attempted)\", _num_tests); \\
  else \\
    message(MX_MSG_ERROR, \" Test Failed. AXI Fails: %d, Test Fails: %d (%d tests attempted)\", AXI_Stub_CheckMacros_Fail, _num_tests - AXI_Stub_CheckMacros_Pass, _num_tests); \\
}" 14021 . 14375)))
          ("CHECK_REGISTER_READ" (spp-arg-list ("myInstanceId" "myInstanceMemSpaceName" "componentName" "regName" "regReadAddress" "numBytes" "expectedValue" "mask") 5738 . 5847) . ((semantic-list "{ \\
  CHECK_MEMORY_READ(myInstanceId, myInstanceMemSpaceName, numBytes, regReadAddress, expectedValue);  \\
  CHECK_REGISTER_DEBUG_READ(componentName, regName, expectedValue, mask);    \\
}" 5848 . 6035)))
          ("CHECK_MEMORY_DEBUG_RW" (spp-arg-list ("myInstanceId" "myInstanceMemSpaceName" "componentName" "regName" "address" "numBytes" "depositValue" "expectedValue") 11604 . 11714) . ((semantic-list "{ \\
  MEMORY_DEBUG_WRITE(myInstanceId, myInstanceMemSpaceName, numBytes, address, depositValue); \\
  CHECK_REGISTER_READ(myInstanceId, myInstanceMemSpaceName, componentName, regName, address, numBytes, expectedValue); \\
}" 11718 . 11939)))
          )
))
  :file "!home!hanlei01!ModelKits!trunk!modelkits!test!primecells!PL423!Regtests!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
